- What is `NPM`?
-> Their is no official full form of NPM. But it is famous as Node Package Manager. NPM is basically a package manager. It gives a super power to add various packages and to use them in our app.
 npm is the default package manager for the JavaScript runtime environment Node.js. It consists of a command line client.
	


- What is `Parcel/Webpack`? Why do we need it?
-> Parcel or webpack or vite are the bundlers. Bundlers are the kind of packages which we install using npm in our app. This packages help us to Minify our app files, cretates Live Server (known as HMR- Hot Module Replacement and File Watcher algorithm - written in c++), does Bundling for our app, Cleans our code, Dev and Production Build, does -image optimization, caching while development, compression(rewriting and compressing our code, code cleaning and all), making our app compatble with older version of browser, Https on dev build, managing port number on localhost

~Hot Module Replacement using File Watcher which is written in C++
~Bundling - merging your dependencies into a single optimized file.
~Minify - Minification is the process of removing all unnecessary characters from the source code of interpreted programming languages or markup languages without changing its functionality.
~Cleaning our code - removing cosole statements and removing unnecesssary code from the app files.
~Dev and Production Build - Using Parcel we can create Dev and Production Build of the app
~Super Fast build algorithm - Parcel has a super fast build algorithm that it creates dev or production build in milli seconds.
~Image Optimization - Multimedia is the heaviest element to get load on the website it is large by size and it also takes more time to get load than other components.
~Caching while development - This caching is for making the build faster for live server. The cache is store in .parcel-cache folder.
~Compression of code(rewriting and Compression of code using Gzip(gzip is a file format and a software application used for file compression and decompression.) and Brotli)
~making our app compatable with older version of browser.
~Https Dev Build - Parcel allow us to build our app on Https localhost

Parcel uses Consistent Hashing Algorithm for doing this all things to make our app faster and optimized. Parcel is ZERO cofig Bundler.


- What is `.parcel-cache`
->The ".parcel-cache" it is a folder which stores the cache of code while development  of the project to build or make live server faster.
~It Stores information about your project when parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyze everything from scratch. It's a key reason why parcel can be so fast in development mode.


- What is `npx` ?
->It allows developers to execute any Javascript Package available on the NPM registry without even installing it. NPX is installed automatically with NPM version 5.2. 0 and above.


- What is difference between `dependencies` vs `devDependencies`
-> ~devDependencies are those packages in the package.json file that you need only for project development purposes.
~Dependency is an object that contains the library, which your project requires for production environments and functioning effectively.


- What is Tree Shaking?
-> In production builds, Parcel statically analyzes the imports and exports of each module, and removes everything that isn't used. This is called "tree shaking" or "dead code elimination".


- What is Hot Module Replacement?
->Hot Module Replacement (HMR) is the ability to push file updates to the browser without triggering a full page refresh. Imagine changing some CSS, hitting save, and then instantly seeing your change reflected on the page without a refresh. That's HMR.


- List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.
-> 1.Bundling. -- Bundling of dependencies in single Optimized file.
2.dev build and production build. -- Parcel allow user to make dev as well as production build.
3.Minification. -- Minification is the process of removing all the unnecessary code without changing the functionality.
4.Image Optimization. -- Parcel Optimizes the multimedia files of the app.
5.Caching of code. (.parcel-cache) -- .parcel-cache contains the information about the project when it builds, so that when it rebuilds it does not need to re-analyze and re-parse everything from scratch.
6.Zero Configuration.  -- It does not need any setup or configuration.
7.Compression.


- What is `.gitignore`? What should we add and not add into it?
->.gitignore contains the list of all the folder/files which user choose to not to be pushed on git. This folder are the folders which can be regenerated by package.json(it contains the dependencies needed for the app dev or production) automatically whenever needed if not available.

~The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.


- What is the difference between `package.json` and `package-lock.json`
->~package-lock.json file is like a one-stop solution of your entire problem. package-lock.json is a file that is automatically generated by npm when a package is installed. It records the exact version of every installed dependency, including its sub-dependencies and their versions.

	~The purpose of package-lock.json is to ensure that the same dependencies are installed consistently across different environments, such as development and production environments. It also helps to prevent issues with installing different package versions, which can lead to conflicts and errors.


- Why should I not modify `package-lock.json`?
->It is a generated file and is not designed to be manually edited. Its purpose is to track the entire tree of dependencies (including dependencies of dependencies) and the exact version of each dependency. You should commit package-lock. json to your code repository


- What is `node_modules` ? Is it a good idea to push that on git?
->	The node_modules contains the all installed dependencies/Packages/Modules inside it. The node_modules can be regenerated using package.json, and it is the heaviest and largest file so we must not push node_modules to the git.
	The node_modules folder contains all the saved JavaScript dependencies of a project. Since this folder often has a massive size, developers typically do not commit it inside the Git repository.


- What is the `dist` folder?
->	The dist folder contains the minimized version of the source code for the production build.
	The /dist stands for distributable. The /dist folder contains the minimized version of the source code. The code present in the /dist folder is actually the code which is used on production web applications.


- What is `browserlists`
->Browserslist is a tool that allows specifying which browsers should be supported in your frontend app by specifying "queries" in a config file. It's used by frameworks/libraries such as React, Angular and Vue, but it's not limited to them.


